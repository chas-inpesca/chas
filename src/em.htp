#if !defined(_EM_)
#  define _EM_

class model_data : public ad_comm{
  data_int styr;
  data_int endyr;
  data_int nages;
  data_vector catch_bio;
  data_int nobs_cpue;
  data_ivector yr_cpue;
  data_vector obs_cpue;
  data_int nobs_surv;
  data_ivector yr_surv;
  data_vector obs_surv;
  data_int nobs_survpel;
  data_ivector yr_survpel;
  data_vector obs_survpel;
  data_int nlenbins;
  data_int nobs_fishlen;
  data_ivector yr_fishlen;
  data_ivector yr_fishlenreclas;
  data_ivector yr_fishlenpelaces;
  data_matrix obs_p_len;
  data_matrix obs_p_lenreclas;
  data_matrix obs_p_lenpelaces;
  data_matrix wta;
  int styr_rec;
  int phase_F40;
  int endyr_fut;
  int styr_fut;
  int dim_sel;
  int dim_sel_f1;
  data_int ph_sel_fish;
  data_number shif_r;
  data_number h;
  data_vector crecimiento;
  data_int opt_VB;
  data_int nlen_fish;
  data_int nlen_fishr;
  data_int nlen_fishp;
  data_number CV_surv;
  data_number CV_survpel;
  data_number CV_catch;
  data_number CV_cpue;
  data_int ph_M;
  data_int ph_sigmar;
  data_int ph_Fdev;
  data_int ph_recdev;
  data_int ph_q;
  data_int ph_qsurv;
  data_int ph_qsurvpel;
  data_number natmortprior;
  data_number cvnatmortprior;
  data_number qprior;
  data_number cvqprior;
  data_vector edad;
  data_vector len;
  data_vector avgL;
  data_vector obs_CV;
  data_vector wt;
  data_vector wti;
  data_number fecha_desov;
  double SpawnMo_Frac;
  data_number fecha_reclas;
  double reclasMo_Frac;
  data_number fecha_pelaces;
  double pelacesMo_Frac;
  data_vector maturity;
  data_int nselagef1;
  data_int group_num_f1;
  data_int ph_sel_fish1;
  data_int ph_seldev_f1;
  data_vector lambda;
  data_number linf;
  data_number k1;
  data_matrix MLE_catch;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number M;
  param_init_bounded_number log_Lo;
  param_init_bounded_number log_cv_edad;
  param_init_bounded_number C;
  param_init_bounded_number Ts;
  param_init_bounded_number sigr;
  param_init_bounded_number log_P;
  param_init_bounded_number a50;
  param_init_bounded_number a95;
  param_init_bounded_number a50p;
  param_init_bounded_number a95p;
  param_init_bounded_number F60;
  param_init_bounded_number F40;
  param_init_bounded_number F20;
  param_init_bounded_number log_Bo;
  param_init_bounded_vector rec_dev_future;
  param_init_bounded_vector cv_age;
  param_init_bounded_dev_vector fmort_dev;
  param_init_bounded_dev_vector log_dev_ini;
  param_init_bounded_dev_vector rec_dev;
  param_init_bounded_matrix sel_devs_f1;
  param_init_vector log_selcoffs_f1;
  param_init_number log_q_surv;
  param_init_number log_q_cpue;
  param_init_number log_q_survpel;
  param_init_number mean_log_rec1;
  param_init_number mean_log_rec;
  param_init_number log_Nini;
  param_init_number log_avg_fmort;
  param_number avgsel_fish1;
  param_number diff;
  param_number Rlast;
  param_number Rmedio;
  param_number Prec;
  param_number sigmar;
  param_number ftmp;
  param_number SB0;
  param_number SBF60;
  param_number SBF40;
  param_number SBF20;
  param_number surv;
  param_number Fmsylast;
  param_number q_fish;
  param_number q_surv;
  param_number q_survpel;
  param_number rec_like;
  param_number cvage_like;
  param_number catch_like;
  param_number age_like;
  param_number age_liker;
  param_number age_likep;
  param_number sel_like;
  param_number sel_dev_like;
  param_number fpen;
  param_number cpue_like;
  param_number surv_like;
  param_number surv_likepel;
  param_number cv_edad;
  param_number k;
  param_number Lo;
  param_number BPRo;
  param_number log_Ro;
  param_number alfa;
  param_number beta1;
  param_number beta2;
  param_number offset;
  param_number offsetr;
  param_number sprpen;
  param_number bmsy;
  param_number rbmsylast;
  param_number avg_rec_dev_future;
  param_number offsetp;
  param_number So;
  param_number sumtmp;
  param_number sigmar_fut;
  param_number Kobs_tot_catch;
  param_vector Nstage;
  param_vector sel_fishr;
  param_vector sel_fishp;
  param_vector Rpred;
  param_vector pred_survnum;
  param_vector pred_survnump;
  param_vector biomass_future;
  param_vector rbmsy;
  param_vector sd_age;
  param_vector var_age;
  param_vector bioadul_future;
  param_vector ssbiom_future;
  param_vector tasa_E;
  param_vector BR;
  param_vector BR2;
  param_vector mu_edad;
  param_vector explbiom;
  param_vector bioadul;
  param_vector npr;
  param_vector expl_biom;
  param_vector ssbiom2P;
  param_vector Neq;
  param_vector avg_F_future;
  param_vector surv_like_residuals;
  param_vector ssqcatch_residuals;
  param_vector surv_like_residualspel;
  param_vector cpue_like_residuals;
  param_vector recruits;
  param_matrix age_sel;
  param_matrix log_sel_f1;
  param_matrix sel_f1;
  param_matrix trans;
  param_matrix sel_fish;
  param_matrix age_sel2;
  param_matrix size_sel;
  param_matrix size_selr;
  param_matrix size_selp;
  param_matrix age_selr;
  param_matrix age_selp;
  param_matrix pred_p_age;
  param_matrix pred_p_agereclas;
  param_matrix pred_p_agepelaces;
  param_matrix pred_p_agep;
  param_matrix pred_p_len;
  param_matrix pred_p_lenreclas;
  param_matrix pred_p_lenpelaces;
  param_matrix natage;
  param_matrix natage2;
  param_matrix natsize;
  param_matrix catage;
  param_matrix Z;
  param_matrix F;
  param_matrix S;
  param_matrix S2;
  param_matrix F_future;
  param_matrix Z_future;
  param_matrix S_future;
  param_matrix catage_future;
  param_matrix Nspr;
  param_matrix nage_future;
  param_matrix pred_p_residual;
  param_matrix pred_p_residualspelaces;
  param_matrix pred_p_residualsreclas;
  param_matrix catch_future;
  param_matrix future_biomass;
  param_matrix future_bioadul;
  param_matrix future_ssbiom;
  param_matrix bio1_ratio;
  param_matrix bio2_ratio;
  param_likeprof_number endbtot;
  param_likeprof_number endssb;
  param_likeprof_number endbadul;
  param_likeprof_number lastF;
  param_stddev_vector Fmort;
  param_stddev_vector RPR;
  param_stddev_vector totbiom;
  param_stddev_vector ssbiom;
  param_stddev_vector pred_surv;
  param_stddev_vector pred_cpue;
  param_stddev_vector pred_survpel;
  param_stddev_vector pred_catch;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void get_agematrix(void);
  void get_selectividad(void);
  void get_mortalidad(void);
  void get_abundancia(void);
  void get_captura(void);
  void spr(void);
  void proyecciones(void);
  void Future_projections_fixed_catch(void);
 void do_Newton_Raphson_for_mortality(int i);
  void get_stock_recluta(void);
  void evaluate_the_objective_function(void);
  void MCWrite(void);

};
#endif
